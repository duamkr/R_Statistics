hist(y2, porbability, =T, xlim= c(-2,2), ylim = c(0,0.65),
main="(1*x1+2*x2+6*x3)/6", xlab='', col='orange', border='red')
n1 <- length(y1[(y1 > -0.1) & (y1 < 0.1)])
n2 <- length(y2[(y2 > -0.1) & (y2 < 0.1)])
data.frame(mean = mean(y1), var=var(y1), n = n1)
data.frame(mean = mean(y2), var=var(y2), n = n2)
par(mfrow= c(1,2))
hist(y1, probability = T, xlim= c(-2,2), ylim=c(0,0.65),
main="(x1+x2+x3)/3", xlab'', col='orange', border = 'red')
mean.seq <- function(x) {
n <- length(x)
sum <- 0
n2 <- 0
for(i in 1:n) {
newx <- i * x[i]
sum <- sum+newx
n2 <- n2 + i
}
return(sum / n2)
}
y1 <- rep(NA, 1000)
y2 <- rep(NA, 1000)
for(i in 1:1000) {
smp <- rnorm(3)
y1[i] <- mean(smp)
y2[i] <- mean.seq(smp)
}
n1 <- length(y1[(y1 > -0.1) & (y1 < 0.1)])
n2 <- length(y2[(y2 > -0.1) & (y2 < 0.1)])
data.frame(mean = mean(y1), var=var(y1), n = n1)
data.frame(mean = mean(y2), var=var(y2), n = n2)
par(mfrow= c(1,2))
hist(y1, probability = T, xlim= c(-2,2), ylim=c(0,0.65),
main="(x1+x2+x3)/3", xlab'', col='orange', border = 'red')
hist(y2, porbability, =T, xlim= c(-2,2), ylim = c(0,0.65),
main="(1*x1+2*x2+6*x3)/6", xlab='', col='orange', border='red')
# Chapter 05. 점추정
# 5.1 점 추정
# 예제 5-1 유효성
library(ggplot2)
hist(y1, probability = T, xlim= c(-2,2), ylim=c(0,0.65),
main="(x1+x2+x3)/3", xlab'', col='orange', border = 'red')
hist(y2, porbability, =T, xlim= c(-2,2), ylim = c(0,0.65),
main="(1*x1+2*x2+6*x3)/6", xlab='', col='orange', border='red')
plot(x,y,type="1", ylim=c(0,0.8), axes=F, ylab='',
lwd=3, col='yellow')
plot(x, y, type="1" , ylim =c(0,0.8), axes =F, ylab ='',
lwd=3, col='yellow')
x <- seq(-3,3, by=0.01)
y <- dnorm(x)
y.1 <- dnorm(x, sd=sqrt(1/3))
y.2 <- dnorm(x, sd=sqrt(7/18))
pnorm(0.1, sd = sqrt(1/3)) - pnorm(-0.1, sd=sqrt(1/3))
pnorm(0.1, sd = sqrt(7/18)) - pnorm(-0.1, sd=sqrt(7/18))
plot(x, y, type="1" , ylim =c(0,0.8), axes =F, ylab ='',
lwd=3, col='yellow')
lines(x,y.1, col='red', lwd=3)
liens(x,y.2, col= 'green', lwd=3)
axis(1)
plot(x, y, type="1" , ylim =c(0,0.8), axes =F, ylab ='',
lwd= 3, col='yellow')
lines(x, y.1, col='red', lwd=3)
liens(x, y.2, col= 'green', lwd=3)
axis(1)
# Chapter 05. 점추정
# 5.1 점 추정
# 예제 5-1 유효성
x <- seq(-3,3, by=0.01)
y <- dnorm(x)
y.1 <- dnorm(x, sd=sqrt(1/3))
y.2 <- dnorm(x, sd=sqrt(7/18))
pnorm(0.1, sd = sqrt(1/3)) - pnorm(-0.1, sd=sqrt(1/3))
pnorm(0.1, sd = sqrt(7/18)) - pnorm(-0.1, sd=sqrt(7/18))
plot(x, y, type="1" , ylim =c(0,0.8), axes =F, ylab ='',
lwd= 3, col='yellow')
plot(x, y, type="l" , ylim =c(0,0.8), axes =F, ylab ='',
lwd= 3, col='yellow')
lines(x, y.1, col='red', lwd=3)
liens(x, y.2, col= 'green', lwd=3)
axis(1)
library(prob)
n <- 3
smps.all <- rolldie(n)
str(smps.all)
head(smps.all, n=3)
(p.p <- 0.5)
n2 <- length(y2[(y2 > -0.1) & (y2 < 0.1)])
n <- 3
smps.all <- rolldie(n)
str(smps.all)
head(smps.all, n=3)
is.even <- function(x) return(!x%%2)
var.p <- function(x) {
return(sum((x-mean(x))^2 / length(x)))
}
p.even <- fuction(x, s.size=3) {
return(sum(is.even(x)) / s/size)
}
phat <- apply(smps.all, 1, p.even)
mean(phat)
(p.p <- 0.5)
var.p(phat)
(p.p*(1-p.p) <- 0.5)
sqrt(var.p(phat)
n <- 3
smps.all <- rolldie(n)
str(smps.all)
head(smps.all, n=3)
is.even <- function(x) return(!x%%2)
var.p <- function(x) {
return(sum((x-mean(x))^2 / length(x)))
}
p.even <- fuction(x, s.size=3) {
return(sum(is.even(x)) / s/size)
}
p.even <- fuction(x, s.size=3) {
return(sum(is.even(x)) / s/size)
}
p.even <- fuction(x, s.size=3) {
return(sum(is.even(x)) / s.size)
}
p.even <- fuction(x, s.size=3) {
return(sum(is.even(x)) / s.size)
}
p.even <- fuction(x, s.size=3) {
return(sum(is.even(x)) / s.size)
}
phat <- apply(smps.all, 1, p.even)
p.even <- function(x, s.size=3) {
return(sum(is.even(x)) / s.size)
}
phat <- apply(smps.all, 1, p.even)
mean(phat)
(p.p <- 0.5)
var.p(phat)
(p.p*(1-p.p) <- 0.5)
sqrt(var.p(phat)
(p.p*(1-p.p)/3)
sqrt(var.p(phat)
mean(phat)
(p.p <- 0.5)
var.p(phat)
(p.p*(1-p.p)/3)
sqrt(var.p(phat)
sqrt(var.p(phat))
# 예제 5-4, 모평균에 대한 95% 신뢰구간
set.seed(9)
n <- 10
x <- 1:100
y <- seq(-3,3,by=0.01)
y
smps <- matrix(rnorm(n * length(x)), ncol = n)
xbar <- apply(smps, 1, mean)
se <- 1/sqrt(10)
alpha <- 0.05
z <- qnorm(1 - alpha/2)
ll <- xbar - z * se
ul <- xbar + z *se
plot(y, type = 'n', xlab = 'trial', ylab = 'z',
main = '95%, Confidence Interval for Population mean',
xlim = c(1, 100), ylim = c(-1.5,1.5), cex.lab = 1.8)
plot(y, type = 'n', xlab = 'trial', ylab = 'z',
main = '95% Confidence Interval for Population mean',
xlim = c(1, 100), ylim = c(-1.5,1.5), cex.lab = 1.8)
abline(h = 0, col = 'red', lty = 2)
1.c <- rep(NA, length(x))
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, 'red', 'black')
arrows(1:length(x), 11, 1:length(x), ul, code = 3,
angle = 90, length= 0.02, col = l.c, lwd=1.5)
set.seed(9)
n <- 10
x <- 1:100
y <- seq(-3,3,by=0.01)
smps <- matrix(rnorm(n * length(x)), ncol = n)
xbar <- apply(smps, 1, mean)
se <- 1/sqrt(10)
alpha <- 0.05
z <- qnorm(1 - alpha/2)
ll <- xbar - z * se
ul <- xbar + z *se
plot(y, type = 'n', xlab = 'trial', ylab = 'z',
main = '95% Confidence Interval for Population mean',
xlim = c(1, 100), ylim = c(-1.5,1.5), cex.lab = 1.8)
abline(h = 0, col = 'red', lty = 2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, 'red', 'black')
arrows(1:length(x), 11, 1:length(x), ul, code = 3,
angle = 90, length= 0.02, col = l.c, lwd=1.5)
arrows(1:length(x), ll, 1:length(x), ul, code = 3,
angle = 90, length= 0.02, col = l.c, lwd=1.5)
set.seed(9)
n <- 10
x <- 1:100
y <- seq(-3,3,by=0.01)
smps <- matrix(rnorm(n * length(x)), ncol = n)
xbar <- apply(smps, 1, mean)
se <- 1/sqrt(10)
alpha <- 0.05
z <- qnorm(1 - alpha/2)
ll <- xbar - z * se
ul <- xbar + z * se
plot(y, type = 'n', xlab = 'trial', ylab = 'z',
main = '95% Confidence Interval for Population mean',
xlim = c(1, 100), ylim = c(-1.5,1.5), cex.lab = 1.8)
abline(h = 0, col = 'red', lty = 2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, 'red', 'black')
arrows(1:length(x), ll, 1:length(x), ul, code = 3,
angle = 90, length= 0.02, col = l.c, lwd=1.5)
qt(0.025,4)
ci <- c(1-alpha, ll, m, u)
ci.t(smp, 0.1)
ci.t <- function(x, alpha = 0.05) {
n <- length(smp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df = n-1)
ll <- m - t * (s/ sqrt(n))
ul <- m + t * (s/ sqrt(n))
ci <- c(1-alpha, ll, m, u)
names(ci) <- c("Confidence Level", "Lower limit", "Mean", "Upper limit")
return(ci)
}
smp <- c(520,498,481,512,515,542,520,518,527,526)
ci.t(smp)
ci.t(smp, 0.1)
# 예제 5-5, 모평균에 대한 95%신뢰구간(모분산을 모를 때)
ci.t <- function(x, alpha = 0.05) {
n <- length(smp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df = n-1)
ll <- m - t * (s/ sqrt(n))
ul <- m + t * (s/ sqrt(n))
ci <- c(1-alpha, ll, m, u)
names(ci) <- c("Confidence Level", "Lower limit", "Mean", "Upper limit")
return(ci)
}
smp <- c(520,498,481,512,515,542,520,518,527,526)
ci.t(smp)
# 예제 5-5, 모평균에 대한 95%신뢰구간(모분산을 모를 때)
ci.t <- function(x, alpha = 0.05) {
n <- length(smp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df = n-1)
ll <- m - t * (s/ sqrt(n))
ul <- m + t * (s/ sqrt(n))
ci <- c(1-alpha, ll, m, ul)
names(ci) <- c("Confidence Level", "Lower limit", "Mean", "Upper limit")
return(ci)
}
smp <- c(520,498,481,512,515,542,520,518,527,526)
ci.t(smp)
ci.t(smp, 0.1)
t
# 7장 여러 모집단의 평균 비교 검정
# 7-1. 모집단이 두개인 경우
# 정규성 테스트
# 기본 명령 shapiro.test()
setwd('D:/Workspace/R_Statistics/ch07')
data <- read.table('chapter7.txt')
var.text(data$weight ~ data$gender)
var.test(data$weight ~ data$gender)
data
str(data)
boy <- subset(data, gender ==1)
boy <- subset(data$gender ==1)
boy <- subset(data, gender ==1)
boy <- subset(data, 'gender' ==1)
boy
boy <- subset(data, gender ==1)
boy <- subset(data, gender ==1)
data <- read.table('chapter7.txt')
data
# 7장 여러 모집단의 평균 비교 검정
# 7-1. 모집단이 두개인 경우
# 정규성 테스트
# 기본 명령 shapiro.test()
setwd('D:/Workspace/R_Statistics/ch07')
data <- read.table('chapter7.txt')
boy <- subset(data, gender ==1)
girl <- subset(data, gender ==2)
# 7장 여러 모집단의 평균 비교 검정
# 7-1. 모집단이 두개인 경우
# 정규성 테스트
# 기본 명령 shapiro.test()
setwd('D:/Workspace/R_Statistics/ch07',header =T)
# 7장 여러 모집단의 평균 비교 검정
# 7-1. 모집단이 두개인 경우
# 정규성 테스트
# 기본 명령 shapiro.test()
setwd('D:/Workspace/R_Statistics/ch07',head =T)
# 7장 여러 모집단의 평균 비교 검정
# 7-1. 모집단이 두개인 경우
# 정규성 테스트
# 기본 명령 shapiro.test()
setwd('D:/Workspace/R_Statistics/ch07',header =T)
data <- read.table('chapter7.txt',header =T)
boy <- subset(data, gender ==1)
girl <- subset(data, gender ==2)
data
shapiro.test(boy$weight)
shapiro.test(girl$weight)
qqnorm(girl$weight)
qqline(git$weight)
qqline(girl$weight)
qqnorm(boy$weight)
qqline(boy$weight)
iriss <- subset(iris, species == 'setosa')
iriss <- subset(iris, Species == 'setosa')
shapiro.test(iriss$Sepal.Length)
qqnorm(iriss$Sepal.Length)
qqline(iriss$Sepal.Length)
shapiro.test(iriss$Petal.Width)
qqnorm((iriss$Petal.Width)
shapiro.test(iriss$Petal.Width)
shapiro.test(iriss$Petal.Width)
qqnorm(iriss$Petal.Width)
qqnorm((iriss$Petal.Width)
qqㅣㅑㅜㄷㄷ((iriss$Petal.Width)
qqline((iriss$Petal.Width)
qqnorm(iriss$Petal.Width)
qqline(iriss$Petal.Width)
# 등분산성 테스트
var.teset(data$weight ~ data$gender)
# 등분산성 테스트
var.test(data$weight ~ data$gender)
t.test(data$weight ~ data$gender, mu = 0, alternative = 'less',
var.equal=TURE)
t.test(data$weight ~ data$gender, mu = 0, alternative = 'less',
var.equal=TRUE)
# 서로 대응인 두 집단의 평균 차이 검정
install.packages("PairedData")
labrary
labrary(PairedData)
libaray(PairedData)
library(PairedData)
data(Anorexia)
data
Anorexia
data <- Anorexi
data <- Anorexia
str(data)
summary(Anorexia)
install.packages("psych")
library(psych)
describe(Anorexia)
Anorexia
n <- length(data$Prior - data$Post)
m <- mean(data$Prior - data$Post)
s <- sd(data$Prior - data$Post)
(t.t <- m/(s / sqrt(n)))
t.test(data$Prior, data$Post, Paired=T, alternative = 'less')
alpha <- 0.05
qt(alpha, df=16)
pt(t.t, df=16)
t.test(data$Prior, data$Post, Paired=T, alternative = 'less')
str(data)
knitr::opts_chunk$set(echo = TRUE)
data <- mtcars
dat
data
data
mtcars
View(mtcars)
View(data)
am <- (data$am == 0)
View(am)
library(dplyr)
library(dplyr)
am <- data %>%
filter(am == 0)
am
View(am)
mt <- data%>%
filter(am == 1)
View(mt)
t.tesT(am$mpg ~ mt$mpg, mu=0)
t.tesT(am$mpg ~ mt$mpg, mu=0,var.equal=FALSE)
t.test(am$mpg ~ mt$mpg, mu=0,var.equal=FALSE)
t.test(am$mpg ~ am$mpg, mu=0,var.equal=FALSE)
t.test(am$mpg ~ mt$mpg, mu=0,var.equal=FALSE)
t.test(data$mpg ~ data$am, mu=0,var.equal=FALSE)
var.test(data$mpg ~ data$am)
# p-value > 0.05 이므로 영가설 채택, 즉 두 집단의 분산은 서로 같다.
t.test(data$mpg ~ data$am, mu=0,var.equal=TURE)
# p-value > 0.05 이므로 영가설 채택, 즉 두 집단의 분산은 서로 같다.
t.test(data$mpg ~ data$am, mu=0,var.equal=TRUE)
# p-value > 0.05 이므로 영가설 채택, 즉 두 집단의 분산은 서로 같다.
t.test(data$mpg ~ data$am, mu=0, var.equal=TRUE)
View(Cars93)
data1 <- Cars93
var.test(data$Price ~ data$Origin)
var.test(data1$Price ~ data1$Origin)
t.test(data1$Price ~ data1$Origin, mu=0, var.equal=TRUE)
t.test(data1$Price ~ data1$Origin, mu=0, var.equal=TRUE)
# p-valure > 0.05 이므로, 영가설 기각, 즉 생산국에 따른 차 가격의 평균의 차이는 없다.
data3 <- mpg
VIew(mpg)
Veiw(mpg)
View(mpg)
data %>%
filter(class == midsize || class == subcompact)
data %>%
filter(class == midsize || class == subcompact)
data3 %>%
filter(class == midsize || class == subcompact)
data3 %>%
filter(class == midsize || class == subcompact)
data3 <- mpg
data3 %>%
filter(class == midsize || class == subcompact)
data3 %>%
filter(class == subcompact)
data3 %>%
filter(class == 'midsize' ||class == 'subcompact')
data3 %>%
filter(class == 'midsize' ||class == 'subcompact')
p3 <- data3 %>%
filter(class == 'midsize' ||class == 'subcompact')
View(p3)
p3 <- data3 %>%
filter(class == 'midsize' ||class == 'subcompact')
View(p3)
p3 <- data3 %>%
filter(class == 'midsize' || class == 'subcompact')
p3 <- data3 %>%
filter(class == 'midsize')
View(p3)
p3 <- data3 %>%
filter(class == 'midsize' | filter(class == 'midsize'))
p3 <- data3 %>%
filter(class == 'midsize' || filter(class == 'midsize'))
p3 <- data3 %>%
filter(class == 'midsize' || filter(class == 'midsize'))
p3 <- data3 %>%
filter(class == 'midsize' , filter(class == 'midsize'))
p3 <- data3 %>%
filter(class == 'midsize')
p4 <- data3 %>%
filter(class == 'subcompact')
View(p4)
filter(class == 'midsize' || 'subcompct)
p3 <- data3 %>%
filter(class == 'midsize' || 'subcompct')
p3 <- data3 %>%
filter(class == 'midsize' || class = 'subcompct')
p3 <- data3 %>%
filter(class == 'midsize' || class = 'subcompct')
p3 <- data3 %>%
filter(class == 'midsize')%>%
filter(class = 'subcompct')
p3 <- data3 %>%
filter(class == 'midsize')%>%
filter(class =='subcompct')
View(p3)
p3 <- data3 %>%
filter(class == 'midsize')%>%
View(p3)
p3 <- data3 %>%
filter(class == 'midsize')%>%
View(p3)
data3 <- mpg
p3 <- data3 %>%
filter(class == 'midsize')%>%
View(p3)
p4 <- data3 %>%
filter(class == 'subcompact')
View(p4)
var.test(data3$Price ~ data1$Origin)
p3 <- data3 %>%
filter(class == 'midsize')%>%
View(p3)
data3 <- mpg
p3 <- data3 %>%
filter(class == 'midsize')%>%
View(p3)
data3 <- mpg
p3 <- data3 %>%
filter(class == 'midsize')%>%
View(p3)
p4 <- data3 %>%
filter(class == 'subcompact')
View(p4)
var.test(data3$Price ~ data1$Origin)
filter(class == 'midsize', class = 'subcompact)
p3 <- data3 %>%
filter(class == 'midsize', class = 'subcompact')
p3 <- data3 %>%
filter(class == 'midsize' || class = 'subcompact')
p3 <- data3 %>%
filter(class == 'midsize' | class = 'subcompact')
p3 <- data3 %>%
filter(class == 'midsize' | class = 'subcompact')
data3 <- mpg
p3 <- data3 %>%
filter(class == 'midsize' | class = 'subcompact')
p3 <- data3 %>%
filter(class == 'midsize'|class = 'subcompact')
p3 <- data3 %>%
filter(class == 'midsize'|class = 'subcompact')
p3 <- filter(data3,class == 'midsize'|class = 'subcompact')
library(dplyr)
p3 <- filter(data3,class == 'midsize'|class = 'subcompact')
data3 <- mpg
filter(data3,class == 'midsize'|class = 'subcompact')
filter(data3,class == 'midsize'|class = 'subcompact')
View(p4)
p3 <-data3 %>%
filter(class == 'midsize'| class = 'subcompact')
