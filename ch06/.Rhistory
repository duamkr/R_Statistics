p.even <- fuction(x, s.size=3) {
return(sum(is.even(x)) / s.size)
}
p.even <- fuction(x, s.size=3) {
return(sum(is.even(x)) / s.size)
}
p.even <- fuction(x, s.size=3) {
return(sum(is.even(x)) / s.size)
}
phat <- apply(smps.all, 1, p.even)
p.even <- function(x, s.size=3) {
return(sum(is.even(x)) / s.size)
}
phat <- apply(smps.all, 1, p.even)
mean(phat)
(p.p <- 0.5)
var.p(phat)
(p.p*(1-p.p) <- 0.5)
sqrt(var.p(phat)
(p.p*(1-p.p)/3)
sqrt(var.p(phat)
mean(phat)
(p.p <- 0.5)
var.p(phat)
(p.p*(1-p.p)/3)
sqrt(var.p(phat)
sqrt(var.p(phat))
# 예제 5-4, 모평균에 대한 95% 신뢰구간
set.seed(9)
n <- 10
x <- 1:100
y <- seq(-3,3,by=0.01)
y
smps <- matrix(rnorm(n * length(x)), ncol = n)
xbar <- apply(smps, 1, mean)
se <- 1/sqrt(10)
alpha <- 0.05
z <- qnorm(1 - alpha/2)
ll <- xbar - z * se
ul <- xbar + z *se
plot(y, type = 'n', xlab = 'trial', ylab = 'z',
main = '95%, Confidence Interval for Population mean',
xlim = c(1, 100), ylim = c(-1.5,1.5), cex.lab = 1.8)
plot(y, type = 'n', xlab = 'trial', ylab = 'z',
main = '95% Confidence Interval for Population mean',
xlim = c(1, 100), ylim = c(-1.5,1.5), cex.lab = 1.8)
abline(h = 0, col = 'red', lty = 2)
1.c <- rep(NA, length(x))
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, 'red', 'black')
arrows(1:length(x), 11, 1:length(x), ul, code = 3,
angle = 90, length= 0.02, col = l.c, lwd=1.5)
set.seed(9)
n <- 10
x <- 1:100
y <- seq(-3,3,by=0.01)
smps <- matrix(rnorm(n * length(x)), ncol = n)
xbar <- apply(smps, 1, mean)
se <- 1/sqrt(10)
alpha <- 0.05
z <- qnorm(1 - alpha/2)
ll <- xbar - z * se
ul <- xbar + z *se
plot(y, type = 'n', xlab = 'trial', ylab = 'z',
main = '95% Confidence Interval for Population mean',
xlim = c(1, 100), ylim = c(-1.5,1.5), cex.lab = 1.8)
abline(h = 0, col = 'red', lty = 2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, 'red', 'black')
arrows(1:length(x), 11, 1:length(x), ul, code = 3,
angle = 90, length= 0.02, col = l.c, lwd=1.5)
arrows(1:length(x), ll, 1:length(x), ul, code = 3,
angle = 90, length= 0.02, col = l.c, lwd=1.5)
set.seed(9)
n <- 10
x <- 1:100
y <- seq(-3,3,by=0.01)
smps <- matrix(rnorm(n * length(x)), ncol = n)
xbar <- apply(smps, 1, mean)
se <- 1/sqrt(10)
alpha <- 0.05
z <- qnorm(1 - alpha/2)
ll <- xbar - z * se
ul <- xbar + z * se
plot(y, type = 'n', xlab = 'trial', ylab = 'z',
main = '95% Confidence Interval for Population mean',
xlim = c(1, 100), ylim = c(-1.5,1.5), cex.lab = 1.8)
abline(h = 0, col = 'red', lty = 2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, 'red', 'black')
arrows(1:length(x), ll, 1:length(x), ul, code = 3,
angle = 90, length= 0.02, col = l.c, lwd=1.5)
qt(0.025,4)
ci <- c(1-alpha, ll, m, u)
ci.t(smp, 0.1)
ci.t <- function(x, alpha = 0.05) {
n <- length(smp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df = n-1)
ll <- m - t * (s/ sqrt(n))
ul <- m + t * (s/ sqrt(n))
ci <- c(1-alpha, ll, m, u)
names(ci) <- c("Confidence Level", "Lower limit", "Mean", "Upper limit")
return(ci)
}
smp <- c(520,498,481,512,515,542,520,518,527,526)
ci.t(smp)
ci.t(smp, 0.1)
# 예제 5-5, 모평균에 대한 95%신뢰구간(모분산을 모를 때)
ci.t <- function(x, alpha = 0.05) {
n <- length(smp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df = n-1)
ll <- m - t * (s/ sqrt(n))
ul <- m + t * (s/ sqrt(n))
ci <- c(1-alpha, ll, m, u)
names(ci) <- c("Confidence Level", "Lower limit", "Mean", "Upper limit")
return(ci)
}
smp <- c(520,498,481,512,515,542,520,518,527,526)
ci.t(smp)
# 예제 5-5, 모평균에 대한 95%신뢰구간(모분산을 모를 때)
ci.t <- function(x, alpha = 0.05) {
n <- length(smp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df = n-1)
ll <- m - t * (s/ sqrt(n))
ul <- m + t * (s/ sqrt(n))
ci <- c(1-alpha, ll, m, ul)
names(ci) <- c("Confidence Level", "Lower limit", "Mean", "Upper limit")
return(ci)
}
smp <- c(520,498,481,512,515,542,520,518,527,526)
ci.t(smp)
ci.t(smp, 0.1)
t
setwd('D:/Workspace/R_Statistics/ch06')
data <- read.csv('2016.6th.csv')
tmp <- subset(data, data$나이==7)
library(stringr)
tmp <- subset(data, data$나이==7)
height.p( tmp$X104.키)
height.p= tmp$X104.키
set.seed(9)
height = height.p[sample(length(height.p), 15)]
height
mean(height)
sd(height)
t.test(height, mu=1220)
## 예제 6-1. 단일 모집단의 평균검정
data <- read.table('http://jse.amstat.org/datasets/babyboom.dat.txt')
str(data)
names(data) <- c('time','gender','weight','minutes')
tmp <- subset(data, gender ==1)
weight <- tmp[[31]]
tmp
weight <- tmp([31])
weight <- tmp[[31]]
weight <- tmp[[3]]
barx <- mean(weight)
s <- sd(weight)
n <- length(weight)
nh0 <- 2800
h0 <- 2800
(t.t<- (barx - h0) / (s / sqrt(n)))
alpha <- 0.05
(c.u <- qt(1-alpha, df=n-1))
(p.value <- 1 - pt(t.t, df= n-1))
t.test(weight, mu=2800, alternative = "greater")
par(mar = c(0,1,1,1))
polygon(c(c.u, x[x > c.u],3), c(0, y[x > c.u], 0), col = 2)
#도표작성
par(mar=c(0,1,1,1))
x <- seq(-3, 3, by=0.001)
y <- dt(x, df=14)
plot(x, y, type="l", axes=F, ylim=c(-0.02, 0.38), main="", xlab="t", ylab="")
abline(h=0)
polygon(c(c.u, x[x > c.u],3), c(0, y[x > c.u], 0), col = 2)
text(c.u, -0.02, expression(t[0.05] = 1.74))
text(c.u, -0.02, expression(t[0.05] == 1.74))
text(1.8, 0.2, expression(alpha == 0.05), cex = 0.8)
arrows(1.8, 0.18, 1.8, 0.09, length = 0.05)
polygon(c(t.t, x[x > t.t],3 ), c(0, y[x > t.t], 0), density = 20, angle = 45)
text(t.t, -0.02, paste("t=", round(t.t, 3)), pos=3)
text(t.t, -0.02, paste("t=", round(t.t, 3)), pos=4)
text(2.65, 0.1, expression(plation(P)(T>2.233) == 0.0196), cex= 0.8)
arrows(2.7, 0.08, 2.5, 0.03, length = 0.05)
# 예제 6-2. 모비율 검정: 야구공의 불량률 검정
tmp <- read.table('D:/Workspace/R_Statistics/ch06/restitution.txt', header = T)
tmp
rel <- ifelse(tmp$rst < 0.4134 | tmp$rst > 0.4374, 1, 0)
rel
n <- length(rel)
n
nos <- sum(rel)
sp <- nos / n
hp <- 0.1
(z <- (sp - hp) / sqrt ( (hp*(1-hp))/n))
alpha <- 0.05
(c.u <- qrnom(1-alpha))
(c.u <- qnorm(1-alpha))
( p.value <- 1-pnorm(z))
prop.test(nos, n, p=0.1, alternative = 'greater', correct = FALSE)
# 7장을 위한 준비 - 데이터 프레임 다루기와 데이터 정제하기
data <- read.table('http://jse.amstat.org/datasets/babyboom.dat.txt')
str(data)
nrow(data)
ncol(data)
str(data)
head(data)
tail(data)
head(data, n=2)
tail(data, n=2)
names(data)
names(data) <- c("time", "gender", "weight", "minutes")
names(data)
row.names(data)
g1 <- data$gender
str(g1)
g2 <- data[,2]
str(g2)
g3 <- data["gender"]
str(g3)
# g1, g2, g3는 data의 gender값을 담지만, g1,g2는 벡터로 저장, g3는 dataframe으로 저장
g4 <- data[1,44]
str(g4)
# g1, g2, g3는 data의 gender값을 담지만, g1,g2는 벡터로 저장, g3는 dataframe으로 저장
g4 <- data[[2]]
str(g4)
knitr::opts_chunk$set(echo = TRUE)
n <- 100
p <- 4/5
nos <-  (100 * 4/5 )/ n
nos
100 *4/5
sp <- nos / 100
sp
nos
sp <- nos / n
nos <-  ( n * 4/5 ) / n
sp <- nos / n
sp <- nos / n
nos <-  ( n * 4/5 ) / n
nos <-  ( n * 4/5 ) / n
nos
nos <-  ( n * 4/5 )
nos
nos <-  ( n * p )
nos
sp
sp <- nos / n
sp
nos
sp <- 1-
prop.test(nos, n, p, alternative = "greater", correct=FALSE)
n <- 100
p <- 4/5
nos <-  ( n * p )
nos
prop.test(nos, n, p, alternative = "greater", correct=FALSE)
sp <- nos / n
sp
hp <- 0.2
(z <- (sp - hp) / sqrt( (hp * (1-hp)) / n))
(z <- (sp - hp) / sqrt( (hp * (1-hp)) / n))
alpha <- 0.05
(c.u <- qnrom(1-alpha))
(c.u <- qnorm(1-alpha))
(p.value <- 1 - pnorm(z))
pnorm(z)
(p.value <- 1 - pnorm(z))
p.value
# 예제 6-2. 모비율 검정: 야구공의 불량률 검정
tmp <- read.table('D:/Workspace/R_Statistics/ch06/restitution.txt', header = T)
rel <- ifelse(tmp$rst < 0.4134 | tmp$rst > 0.4374, 1, 0)
n <- length(rel)
nos <- sum(rel)
sp <- nos / n
sp
nos
n
nos
sp
n <- 100
p <- 0.2
nos <-  ( n / p )
nos
nos <-  ( p / n )
nos
nos <-  ( (1-0.2) * 100 )
nos
sp <- nos / n
sp
nos <-  ( 0.2 * 100 )
nos
sp
hp
(z <- (sp - hp) / sqrt( (hp * (1-hp)) / n))
nos <-  ( 0.8 * 100 )
nos
sp <- nos / n
sp
nos <-  ( 0.8 * 100 )
nos
sp <- nos / n
hp <- 0.2
hp <- 0.8
(z <- (sp - hp) / sqrt( (hp * (1-hp)) / n))
nos <-  ( 0.8 * 100 )
sp <- nos / n
hp <- 0.8
(z <- (sp - hp) / sqrt( (hp * (1-hp)) / n))
alpha <- 0.05
(c.u <- qnorm(1-alpha))
(p.value <- 1 - pnorm(z))
prop.test(nos, n, p, alternative = "greater", correct=FALSE)
(z <- (sp - hp) / sqrt( (hp * (1-hp)) / n))
n <- 100
p <- 0.2
nos <-  ( 0.2 * 100 )
sp <- nos / n
hp <- 0.2
(z <- (sp - hp) / sqrt( (hp * (1-hp)) / n))
nos
sp
sp
(z <- (sp - hp) / sqrt( (hp * (1-hp)) / n))
hp <- 0.2
prop.test(80, 100, 80, alternative = "greater", correct=FALSE)
prop.test(80, 100, 0.8, alternative = "greater", correct=FALSE)
prop.test(80, 100, 0.8)
prop.test(80, 100, 0.8, alternative = T)
prop.test(80, 100, 0.8)
prop.test(430, 1000, 0.43)
nos <- 0.57
sp <- nos / n
sp
#H0 : P = 0.43
n <- 1000
p <- 0.43
nos <- 570
sp <- nos / n
sp
sp
nos
s
sp
p <- 430/1000
p
nos
sp
hp <- 0.43
(z <- (sp - hp) / sqrt ( (hp * (1-hp))/n ))
alpha <- 0.10
(c.u <- qnorm(1-alpha))
(p.value <- 1- pnorm(z))
(p.value <- 1 - pnorm(z))
prop.test(430, 1000, 0.43)
sqrt(0.43)
(z <- (sp - hp) / sqrt ( (hp * (1-hp))/n ))
sp
hp
(z <- (sp - hp) / sqrt ( (hp * (1-hp))/n ))
(p.value <- 1 - pnorm(z))
alpha <- 0.050
(c.u <- qnorm(1-alpha))
(p.value <- 1 - pnorm(z))
prop.test(430, 1000, 0.43)
sqrt(0.43)
#H0 : P = 0.43
n <- 1000
p <- 430/1000
nos <- 430
sp <- nos / n
hp <- 0.43
(z <- (sp - hp) / sqrt ( (hp * (1-hp))/n ))
alpha <- 0.050
(c.u <- qnorm(1-alpha))
(p.value <- 1 - pnorm(z))
sp
#H0 : P = 0.43
n <- 1000
nos <- 430
sp <- nos / n
hp <- 0.43
(z <- (sp - hp) / sqrt ( (hp * (1-hp))/n ))
alpha <- 0.050
(c.u <- qnorm(1-alpha))
(p.value <- 1 - pnorm(z))
prop.test(430, 1000, 0.43)
sqrt(0.43)
hp <- 0.1
(z <- (sp - hp) / sqrt ( (hp * (1-hp))/n ))
#H0 : P = 0.43
n <- 1000
nos <- 430
sp <- nos / n
hp <- 0.1
(z <- (sp - hp) / sqrt ( (hp * (1-hp))/n ))
alpha <- 0.050
(c.u <- qnorm(1-alpha))
alpha <- 0.05
(c.u <- qnorm(1-alpha))
(p.value <- 1 - pnorm(z))
(z <- (sp - hp) / sqrt ( (hp * (1-hp))/n ))
(p.value <- 1 - pnorm(z))
(c.u <- qnorm(1-alpha))
(p.value <- 1 - pnorm(z))
(p.value <- 1 - pnorm(z))
prop.test(430, 1000, 0.43)
prop.test(430, 1000, 0.43, alternative = "greater")
prop.test(430, 1000, 0.43, alternative = "greater")
(p.value <- 1 - pnorm(z))
#H0 : P = 0.43
n <- 1000
nos <- 430
sp <- nos / n
prop.test(430, 1000, 0.43, alternative = "greater")
0.43
sqrt(0.43)
(z <- (sp - hp) / sqrt ( (hp * (1-hp))/n ))
sp
prop.test(80, 100, 0.8,alternative = "greater")
prop.test(80, 100, 0.8,alternative = "greater")
#H0 : P = 0.90
n <- 1000
sp <- nos / n
hp <- 0.9
(z <- (sp - hp) / sqrt ( (hp * (1-hp))/n ))
hp <- 0.1
(z <- (sp - hp) / sqrt ( (hp * (1-hp))/n ))
# 표본 비율
sp <- nos / n
(z <- (sp - hp) / sqrt ( (hp*(1-hp))/n ))
alpha <- 0.05
(c.u <- qnorm(1-alpha))
(p.value <- 1 - pnorm(z))
c.u
(z <- (sp - hp) / sqrt ( (hp*(1-hp))/n ))
prop.test(80, 100, 0.8)
prop.test(430, 1000, 0.43, alternative = "greater")
prop.test(430, 1000, 0.43)
0.09946049 * 1.05
prop.test(430, 1000, 0.43)
0.3996409 * 1.05
0.4196229 * 0.9
prop.test(430, 1000, 0.43)
0.3996409 * 1.05
0.4196229 * 0.9
0.4196229 * 0.95
1.64 * sqrt(0.43 * (1-0.43) / (1000+1.64^2))
c(980,1008,968,1032,1012,996,1021,1002,996,1017)
p1 <-c(980,1008,968,1032,1012,996,1021,1002,996,1017)
t.test(p1, 1000)
t.test(p1, 1000, alternative = "greater")
p1 <-c(980,1008,968,1032,1012,996,1021,1002,996,1017)
p1
t.test(p1, mu=1000, alternative = "greater")
t.test(p1, mu=1000)
p2 <- c(58,49,39,99,32,88,62,30,55,65,44,55,57,53,88,42,39)
p2
t.test(p2, mu=55)
p3 <- c(15.50, 11.21, 12.67, 8.87, 12.15, 9.88, 2.06, 14.50, 0, 4.97)
p3
t.test(p2, mu=8.1)
t.test(p3, mu=8.1)
t.test(p3, mu=8.1, alternative = "greater")
t.test(p3, mu=8.1)
p3 <- c(15.50, 11.21, 12.67, 8.87, 12.15, 9.88, 2.06, 14.50, 0, 4.97,alternative = 'greater')
p3 <- c(15.50, 11.21, 12.67, 8.87, 12.15, 9.88, 2.06, 14.50, 0, 4.97)
p3 <- c(15.50, 11.21, 12.67, 8.87, 12.15, 9.88, 2.06, 14.50, 0, 4.97)
t.test(p3, mu=8.1,alternative = 'greater')
t.test(p3, mu=8.1)
p2 <- c(58,49,39,99,32,88,62,30,55,65,44,55,57,53,88,42,39)
t.test(p2, mu=55,alternative = 'greater')
prop.test(80, 100, 0.8)
p <- 0.5
p <- 0.5
n <- 100
alpha <- 0.05
1.96 * sqrt(0.43 * (1-0.43) / (1000+1.96^2))
prop.test(430, 1000, 0.43)
1.96 * sqrt(0.43 * (1-0.43) / (1000+1.96^2))
prop.test(50, 100, 0.8)
prop.test(50, 100, 0.)
prop.test(50, 100, 0.5)
prop.test(500, 1000, 0.5)
prop.test(50, 100, 0.5)
prop.test(430, 1000, 0.43)
1.64 * sqrt(0.43 * (1-0.43) / (1000+1.64^2))
1.96 * sqrt(0.43 * (1-0.43) / (1000+1.96^2))
ll <-  0.43-1.645 * sqrt(0.43 * (1-0.43) / (1000))
ul <- 0.43+1.645 * sqrt(0.43 * (1-0.43) / (1000))
c(ll,ul)
#H0 : P = 0.90
n <- 1000
p <- 430/1000
prop.test(430, 1000, 0.43)
c(ll,ul)
prop.test(430, 1000, 0.43)
cat(ll,"%")
cat(ll,round(3)"%")
cat(round(ll,3)"%")
cat(round(ll,3),"%")
cat(ll, " ~ ", ul)
cat("dd"ll, " ~ ", ul)
cat(ll, " ~ ", ul)
prop.test(80, 100, 0.8)
cat(ll, " ~ ", ul)
