y4 <- dnorm(x4,mean=5,sd=sqrt(10)/sqrt(160))
lines(x4,y4,lty=2,lwd=2,col="blue")
```
set.seed(123)
df <- 10
x <- seq(-100,100,by=0.001)
n <- 1000
t.5.mean <- rep(NA,n)
t.20.mean <- rep(NA,n)
t.40.mean <- rep(NA,n)
t.160.mean <- rep(NA,n)
for (i in 1:n) {
t.5.mean[i] <- mean(rt(5,df))
t.20.mean[i] <- mean(rt(20,df))
t.40.mean[i] <- mean(rt(40,df))
t.160.mean[i] <- mean(rt(160,df))
}
options(digits=4)
c(mean(t.5.mean),sd(t.5.mean))
c(mean(t.20.mean),sd(t.20.mean))
c(mean(t.40.mean),sd(t.40.mean))
c(mean(t.160.mean),sd(t.160.mean))
par(mfrow=c(2,2))
hist(t.5.mean,prob=T,main="T with n=5",
col="green",border="red")
x1 <- seq(min(t.5.mean),max(t.5.mean),length=1000)
y1 <- dnorm(x1,mean=0,sd=sqrt(10/8)/sqrt(5))
lines(x1,y1,lty=2,lwd=2,col="blue")
hist(t.20.mean,prob=T,main="T with n=20",
col="green",border="red")
x2 <- seq(min(t.20.mean),max(t.20.mean),length=1000)
y2 <- dnorm(x2,mean=0,sd=sqrt(10/8)/sqrt(20))
lines(x2,y2,lty=2,lwd=2,col="blue")
hist(t.40.mean,prob=T,main="T with n=40",
col="green",border="red")
x3 <- seq(min(t.40.mean),max(t.40.mean),length=1000)
y3 <- dnorm(x3,mean=0,sd=sqrt(10/8)/sqrt(40))
lines(x3,y3,lty=2,lwd=2,col="blue")
hist(t.160.mean,prob=T,main="T with n=160",
col="green",border="red")
x4 <- seq(min(t.160.mean),max(t.160.mean),length=1000)
y4 <- dnorm(x4,mean=0,sd=sqrt(10/8)/sqrt(160))
lines(x4,y4,lty=2,lwd=2,col="blue")
set.seed(9)
x <- seq(0,500,by=0.001)
n <- 1000
m4   <- rep(NA, 1000)     # 결측치 생성
m16  <- rep(NA, 1000)
m32  <- rep(NA, 1000)
m256 <- rep(NA, 1000)
m4[i]   <- mean(chisq(4,1))
m4[i]   <- mean(rchisq(4,1))
for(i in 1:1000) {
m4[i]   <- mean(rchisq(4,1))
m16[i]  <- mean(rchisq(16,1))
m32[i]  <- mean(rchisq(32,1))
m256[i] <- mean(rchisq(256,1))
}
c(mean(chi.5.mean),sd(chi.5.mean))
c(mean(m4). sd(m4)
c(mean(m4). sd(m4))
c(mean(m4), sd(m4))
c(mean(m16), sd(m16))
c(mean(m32), sd(m32))
c(mean(m256), sd(m256))
hist(chi.5.mean,prob=T,main="카이제곱분포 df=1, n= 4",
col="yellow",border="red")
hist(chi.5.mean,prob=T,main="카이제곱분포 df=1, n= 4",
col="cyan",border="red")
hist(chi.5.mean,prob=T,main="카이제곱분포 df=1, n= 4",
col="cyan")
x1 <- seq(min(m4),max(m4),length=1000)
c(mean(chi.5.mean),sd(chi.5.mean))
c(mean(chi.5.mean),sd(chi.5.mean))
c(mean(m4), sd(m4))
c(mean(m4), sd(m4))
c(mean(m16), sd(m16))
c(mean(m32), sd(m32))
c(mean(chi.5.mean),sd(chi.5.mean))
c(mean(chi.20.mean),sd(chi.20.mean))
c(mean(chi.40.mean),sd(chi.40.mean))
c(mean(m4), sd(m4))
c(mean(m16), sd(m16))
c(mean(m32), sd(m32))
c(mean(chi.5.mean),sd(chi.5.mean))
var(chi.5.mean)
sqrt(chi.5.mean)
var(chi.5.mean)
sqrt(2.031)
var(x)
var(1000)
c(mean(chi.5.mean),sd(chi.5.mean))
c(mean(chi.20.mean),sd(chi.20.mean))
c(mean(chi.40.mean),sd(chi.40.mean))
c(mean(chi.160.mean),sd(chi.160.mean))
set.seed(9)
n <- 1000
r.1.mean = rep(NA, n)
r.2.mean = rep(NA, n)
for (i in 1:n) {
r.1.mean[i] = mean( rnorm(4, mean = 3, sd = 1))      # 평균이 3, 표준편차가 1인 정규분포에서 표본 4개 추출, N(3, 1^2)
r.2.mean[i] = mean( rnorm(4, mean = 170, sd = 6))    # 평균이 170, 표준편차가 6인 정규분포에서 표본 4개 추출, N(170, 6^2)
}
# 표본 평균들의 분포에서 평균과 표준편차를 구합니다
options(digit = 4)
c(mean(r.1.mean), sd(r.1.mean))
c(mean(r.2.mean), sd(r.2.mean))
# 예제 4-3. 임의의 분포에서 추출된 표본평균 x의 분포
set.seed(9)
t <- 10
p <- 0.1
x <- 0:10
n <- 1000
b.2.mean <- rep(NA, n)
b.4.mean <- rep(NA, n)
b.32.mean <- rep(NA, n)
b.64.mean <- rep(NA, n)
for (i in 1:n) {
b.2.mean[i]  <- mean(rbinom(2, size = t, prob = p))
b.4.mean[i]  <- mean(rbinom(4, size = t, prob = p))
b.32.mean[i] <- mean(rbinom(32, size = t, prob = p))
b.64.mean[i] <- mean(rbinom(64, size = t, prob = p))
}
c(mean(b.2.mean), sd(b.2.mean))
c(mean(b.4.mean), sd(b.4.mean))
c(mean(b.32.mean), sd(b.32.mean))
c(mean(b.64.mean), sd(b.64.mean))
# B(10, 0,1)의 분산과 표준편차
c(10*0.1*0.9, sqrt(10*0.1*0.9))    # 이항분포의 분산 = Var(X)= np(1-n)
# B(10, 0,1)의 분산과 표준편차
c(10*0.1*0.9, sqrt(10*0.1*0.9))    # 이항분포의 분산 = Var(X)= np(1-n)
sqrt(1000*0.1*0.9)
sqrt(10*0.1*0.9)
# B(10, 0,1)의 분산과 표준편차
c(10*0.1*0.9, sqrt(10*0.1*0.9))    # 이항분포의 분산 = Var(X)= np(1-n)
var(b.2.mean)
set.seed(9)
n <- 1000
n <- 1000 ; n
x <- seq(0,500,by=0.001)
mean.4   <- rep(NA, 1000)     # 결측치 생성
mean.16  <- rep(NA, 1000)
mean.32  <- rep(NA, 1000)
mean.256 <- rep(NA, 1000)
mean.4[i]   <- mean(rchisq(4,1))
mean.16[i]  <- mean(rchisq(16,1))
mean.32[i]  <- mean(rchisq(32,1))
mean.256[i] <- mean(rchisq(256,1))
for(i in 1:1000) {
mean.4[i]   <- mean(rchisq(4,1))
mean.16[i]  <- mean(rchisq(16,1))
mean.32[i]  <- mean(rchisq(32,1))
mean.256[i] <- mean(rchisq(256,1))
}
c(mean(mean.4), sd(mean.4))
c(mean(mean.16), sd(mean.16))
c(mean(mean.32), sd(mean.32))
c(mean(mean.256), sd(mean.256))
hist(chi.5.mean,prob=T,main="카이제곱분포 df=1, n= 4",
col="cyan")
x1 <- seq(min(m4),max(m4),length=1000)
y1 <- dnorm(x1, mean = 1, sd=2/sqrt(4))
lines(x1,y1,lty=2,lwd=2,col="blue")
y1 <- dnorm(x1, mean = 1, sd=sqrt(2)/sqrt(4))
hist(chi.5.mean,prob=T,main="카이제곱분포 df=1, n= 4",
col="cyan")
lines(x1,y1,lty=2,lwd=2,col="blue")
hist(chi.5.mean,prob=T,main="카이제곱분포 df=1, n= 4",
col="cyan")
hist(chi.5.mean,prob=T,main="카이제곱분포 df=1, n= 4",
col="cyan")
x1 <- seq(min(mean.4),max(mean.4),length=1000)
y1 <- dnorm(x1, mean = 1, sd=sqrt(2)/sqrt(4))
lines(x1,y1,lty=2,lwd=2,col="blue")
hist(mean.4,prob=T,main="카이제곱분포 df=1, n= 4",
col="cyan")
x1 <- seq(min(mean.4),max(mean.4),length=1000)
y1 <- dnorm(x1, mean = 1, sd=sqrt(2)/sqrt(4))
lines(x1,y1,lty=2,lwd=2,col="blue")
hist(mean.4,prob=T,main="카이제곱분포 df=1, n= 4",
col="cyan")
y1 <- dnorm(x1, mean = 1, sd=sqrt(10)/sqrt(4))
lines(x1,y1,lty=2,lwd=2, col="blue")
set.seed(9)
x <- seq(0,500,by=0.001)
mean.4   <- rep(NA, 1000)     # 결측치 생성
mean.16  <- rep(NA, 1000)
mean.32  <- rep(NA, 1000)
mean.256 <- rep(NA, 1000)
for(i in 1:1000) {
mean.4[i]   <- mean(rchisq(4,5))
mean.16[i]  <- mean(rchisq(16,5))
mean.32[i]  <- mean(rchisq(32,5))
mean.256[i] <- mean(rchisq(256,5))
}
c(mean(mean.4), sd(mean.4))
c(mean(mean.16), sd(mean.16))
c(mean(mean.32), sd(mean.32))
c(mean(mean.256), sd(mean.256))
hist(mean.4,prob=T,main="카이제곱분포 df=5, n= 4",
col="cyan")
x1 <- seq(min(mean.4),max(mean.4),length=1000)
y1 <- dnorm(x1, mean = 1, sd=sqrt(10)/sqrt(4))
lines(x1, y1, lty=2, lwd=2, col="blue")
c(mean(mean.4), sd(mean.4))
c(mean(mean.16), sd(mean.16))
c(mean(mean.32), sd(mean.32))
c(mean(mean.256), sd(mean.256))
hist(mean.4,prob=T,main="카이제곱분포 df=5, n= 4",
col="cyan")
lines(x1, y1, lty=2, lwd=2, col="blue")
hist(mean.4,prob=T,main="카이제곱분포 df=5, n= 4",
col="cyan")
x1 <- seq(min(mean.4),max(mean.4),length=1000)
y1 <- dnorm(x1, mean = 1, sd=sqrt(10)/sqrt(4))
hist(mean.4,prob=T,main="카이제곱분포 df=5, n= 4",
col="cyan")
x <- seq(-3,3, by=0.01)
y <- dnorm(x)
y.1 <- dnorm(x, sd=sqrt(1/3))
y.2 <- dnorm(x, sd=sqrt(7/18))
pnorm(0.1, sd = sqrt(1/3)) - pnorm(-0.1, sd=sqrt1/3))
pnorm(0.1, sd = sqrt(1/3)) - pnorm(-0.1, sd=sqrt(1/3))
pnorm(0.1, sd = sqrt(7/18)) - pnorm(-0.1, sd=sqrt(7/18))
# 예제 5-2 유효성 모의실험
mean.seq <- function(x) {
n <- length(x)
sum <- 0
n2 <- 0
for(i in 1:n) {
newx <- i * x[i]
sum <- sum+newx
n2 <- n2 + i
}
return(sum / n2)
}
y1 <- rep(NA, 1000)
y2 <- rep(NA, 1000)
51
y1
62
y2
for(i in 1:1000) {
smp <- rnorm(3)
y1[i] <- mean(smp)
y2[i] <- mean.seq(smp)
}
n1 <- length(y1[y1 > -0.1) & (y1 < 0.1)])
n1 <- length(y1[(y1 > -0.1) & (y1 < 0.1)])
n2 <- length(y2[(y2 > -0.1) & (y2 < 0.1)])
data.frame(mean = mean(y1), var=var(y1), n = n1)
data.frame(mean = mean(y2), var=var(y2), n = n2)
par(mfrow= c(1,2))
hist(y1, probability = T, xlim= c(-2,2), ylim=c(0,0.65),
main="(x1+x2+x3)/3", xlab'', col='orange', border = 'red')
hist(y2, porbability, =T, xlim= c(-2,2), ylim = c(0,0.65),
main="(1*x1+2*x2+6*x3)/6", xlab='', col='orange', border='red')
n1 <- length(y1[(y1 > -0.1) & (y1 < 0.1)])
n2 <- length(y2[(y2 > -0.1) & (y2 < 0.1)])
data.frame(mean = mean(y1), var=var(y1), n = n1)
data.frame(mean = mean(y2), var=var(y2), n = n2)
par(mfrow= c(1,2))
hist(y1, probability = T, xlim= c(-2,2), ylim=c(0,0.65),
main="(x1+x2+x3)/3", xlab'', col='orange', border = 'red')
mean.seq <- function(x) {
n <- length(x)
sum <- 0
n2 <- 0
for(i in 1:n) {
newx <- i * x[i]
sum <- sum+newx
n2 <- n2 + i
}
return(sum / n2)
}
y1 <- rep(NA, 1000)
y2 <- rep(NA, 1000)
for(i in 1:1000) {
smp <- rnorm(3)
y1[i] <- mean(smp)
y2[i] <- mean.seq(smp)
}
n1 <- length(y1[(y1 > -0.1) & (y1 < 0.1)])
n2 <- length(y2[(y2 > -0.1) & (y2 < 0.1)])
data.frame(mean = mean(y1), var=var(y1), n = n1)
data.frame(mean = mean(y2), var=var(y2), n = n2)
par(mfrow= c(1,2))
hist(y1, probability = T, xlim= c(-2,2), ylim=c(0,0.65),
main="(x1+x2+x3)/3", xlab'', col='orange', border = 'red')
hist(y2, porbability, =T, xlim= c(-2,2), ylim = c(0,0.65),
main="(1*x1+2*x2+6*x3)/6", xlab='', col='orange', border='red')
# Chapter 05. 점추정
# 5.1 점 추정
# 예제 5-1 유효성
library(ggplot2)
hist(y1, probability = T, xlim= c(-2,2), ylim=c(0,0.65),
main="(x1+x2+x3)/3", xlab'', col='orange', border = 'red')
hist(y2, porbability, =T, xlim= c(-2,2), ylim = c(0,0.65),
main="(1*x1+2*x2+6*x3)/6", xlab='', col='orange', border='red')
plot(x,y,type="1", ylim=c(0,0.8), axes=F, ylab='',
lwd=3, col='yellow')
plot(x, y, type="1" , ylim =c(0,0.8), axes =F, ylab ='',
lwd=3, col='yellow')
x <- seq(-3,3, by=0.01)
y <- dnorm(x)
y.1 <- dnorm(x, sd=sqrt(1/3))
y.2 <- dnorm(x, sd=sqrt(7/18))
pnorm(0.1, sd = sqrt(1/3)) - pnorm(-0.1, sd=sqrt(1/3))
pnorm(0.1, sd = sqrt(7/18)) - pnorm(-0.1, sd=sqrt(7/18))
plot(x, y, type="1" , ylim =c(0,0.8), axes =F, ylab ='',
lwd=3, col='yellow')
lines(x,y.1, col='red', lwd=3)
liens(x,y.2, col= 'green', lwd=3)
axis(1)
plot(x, y, type="1" , ylim =c(0,0.8), axes =F, ylab ='',
lwd= 3, col='yellow')
lines(x, y.1, col='red', lwd=3)
liens(x, y.2, col= 'green', lwd=3)
axis(1)
# Chapter 05. 점추정
# 5.1 점 추정
# 예제 5-1 유효성
x <- seq(-3,3, by=0.01)
y <- dnorm(x)
y.1 <- dnorm(x, sd=sqrt(1/3))
y.2 <- dnorm(x, sd=sqrt(7/18))
pnorm(0.1, sd = sqrt(1/3)) - pnorm(-0.1, sd=sqrt(1/3))
pnorm(0.1, sd = sqrt(7/18)) - pnorm(-0.1, sd=sqrt(7/18))
plot(x, y, type="1" , ylim =c(0,0.8), axes =F, ylab ='',
lwd= 3, col='yellow')
plot(x, y, type="l" , ylim =c(0,0.8), axes =F, ylab ='',
lwd= 3, col='yellow')
lines(x, y.1, col='red', lwd=3)
liens(x, y.2, col= 'green', lwd=3)
axis(1)
library(prob)
n <- 3
smps.all <- rolldie(n)
str(smps.all)
head(smps.all, n=3)
(p.p <- 0.5)
n2 <- length(y2[(y2 > -0.1) & (y2 < 0.1)])
n <- 3
smps.all <- rolldie(n)
str(smps.all)
head(smps.all, n=3)
is.even <- function(x) return(!x%%2)
var.p <- function(x) {
return(sum((x-mean(x))^2 / length(x)))
}
p.even <- fuction(x, s.size=3) {
return(sum(is.even(x)) / s/size)
}
phat <- apply(smps.all, 1, p.even)
mean(phat)
(p.p <- 0.5)
var.p(phat)
(p.p*(1-p.p) <- 0.5)
sqrt(var.p(phat)
n <- 3
smps.all <- rolldie(n)
str(smps.all)
head(smps.all, n=3)
is.even <- function(x) return(!x%%2)
var.p <- function(x) {
return(sum((x-mean(x))^2 / length(x)))
}
p.even <- fuction(x, s.size=3) {
return(sum(is.even(x)) / s/size)
}
p.even <- fuction(x, s.size=3) {
return(sum(is.even(x)) / s/size)
}
p.even <- fuction(x, s.size=3) {
return(sum(is.even(x)) / s.size)
}
p.even <- fuction(x, s.size=3) {
return(sum(is.even(x)) / s.size)
}
p.even <- fuction(x, s.size=3) {
return(sum(is.even(x)) / s.size)
}
phat <- apply(smps.all, 1, p.even)
p.even <- function(x, s.size=3) {
return(sum(is.even(x)) / s.size)
}
phat <- apply(smps.all, 1, p.even)
mean(phat)
(p.p <- 0.5)
var.p(phat)
(p.p*(1-p.p) <- 0.5)
sqrt(var.p(phat)
(p.p*(1-p.p)/3)
sqrt(var.p(phat)
mean(phat)
(p.p <- 0.5)
var.p(phat)
(p.p*(1-p.p)/3)
sqrt(var.p(phat)
sqrt(var.p(phat))
# 예제 5-4, 모평균에 대한 95% 신뢰구간
set.seed(9)
n <- 10
x <- 1:100
y <- seq(-3,3,by=0.01)
y
smps <- matrix(rnorm(n * length(x)), ncol = n)
xbar <- apply(smps, 1, mean)
se <- 1/sqrt(10)
alpha <- 0.05
z <- qnorm(1 - alpha/2)
ll <- xbar - z * se
ul <- xbar + z *se
plot(y, type = 'n', xlab = 'trial', ylab = 'z',
main = '95%, Confidence Interval for Population mean',
xlim = c(1, 100), ylim = c(-1.5,1.5), cex.lab = 1.8)
plot(y, type = 'n', xlab = 'trial', ylab = 'z',
main = '95% Confidence Interval for Population mean',
xlim = c(1, 100), ylim = c(-1.5,1.5), cex.lab = 1.8)
abline(h = 0, col = 'red', lty = 2)
1.c <- rep(NA, length(x))
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, 'red', 'black')
arrows(1:length(x), 11, 1:length(x), ul, code = 3,
angle = 90, length= 0.02, col = l.c, lwd=1.5)
set.seed(9)
n <- 10
x <- 1:100
y <- seq(-3,3,by=0.01)
smps <- matrix(rnorm(n * length(x)), ncol = n)
xbar <- apply(smps, 1, mean)
se <- 1/sqrt(10)
alpha <- 0.05
z <- qnorm(1 - alpha/2)
ll <- xbar - z * se
ul <- xbar + z *se
plot(y, type = 'n', xlab = 'trial', ylab = 'z',
main = '95% Confidence Interval for Population mean',
xlim = c(1, 100), ylim = c(-1.5,1.5), cex.lab = 1.8)
abline(h = 0, col = 'red', lty = 2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, 'red', 'black')
arrows(1:length(x), 11, 1:length(x), ul, code = 3,
angle = 90, length= 0.02, col = l.c, lwd=1.5)
arrows(1:length(x), ll, 1:length(x), ul, code = 3,
angle = 90, length= 0.02, col = l.c, lwd=1.5)
set.seed(9)
n <- 10
x <- 1:100
y <- seq(-3,3,by=0.01)
smps <- matrix(rnorm(n * length(x)), ncol = n)
xbar <- apply(smps, 1, mean)
se <- 1/sqrt(10)
alpha <- 0.05
z <- qnorm(1 - alpha/2)
ll <- xbar - z * se
ul <- xbar + z * se
plot(y, type = 'n', xlab = 'trial', ylab = 'z',
main = '95% Confidence Interval for Population mean',
xlim = c(1, 100), ylim = c(-1.5,1.5), cex.lab = 1.8)
abline(h = 0, col = 'red', lty = 2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, 'red', 'black')
arrows(1:length(x), ll, 1:length(x), ul, code = 3,
angle = 90, length= 0.02, col = l.c, lwd=1.5)
qt(0.025,4)
ci <- c(1-alpha, ll, m, u)
ci.t(smp, 0.1)
ci.t <- function(x, alpha = 0.05) {
n <- length(smp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df = n-1)
ll <- m - t * (s/ sqrt(n))
ul <- m + t * (s/ sqrt(n))
ci <- c(1-alpha, ll, m, u)
names(ci) <- c("Confidence Level", "Lower limit", "Mean", "Upper limit")
return(ci)
}
smp <- c(520,498,481,512,515,542,520,518,527,526)
ci.t(smp)
ci.t(smp, 0.1)
# 예제 5-5, 모평균에 대한 95%신뢰구간(모분산을 모를 때)
ci.t <- function(x, alpha = 0.05) {
n <- length(smp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df = n-1)
ll <- m - t * (s/ sqrt(n))
ul <- m + t * (s/ sqrt(n))
ci <- c(1-alpha, ll, m, u)
names(ci) <- c("Confidence Level", "Lower limit", "Mean", "Upper limit")
return(ci)
}
smp <- c(520,498,481,512,515,542,520,518,527,526)
ci.t(smp)
# 예제 5-5, 모평균에 대한 95%신뢰구간(모분산을 모를 때)
ci.t <- function(x, alpha = 0.05) {
n <- length(smp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df = n-1)
ll <- m - t * (s/ sqrt(n))
ul <- m + t * (s/ sqrt(n))
ci <- c(1-alpha, ll, m, ul)
names(ci) <- c("Confidence Level", "Lower limit", "Mean", "Upper limit")
return(ci)
}
smp <- c(520,498,481,512,515,542,520,518,527,526)
ci.t(smp)
ci.t(smp, 0.1)
t
